#############
# Automatically generated by generator.py in splunk/security-content
# On Date: {{ time }} UTC
# Author: Splunk Security Research
# Contact: research@splunk.com
#############

### ESCU DETECTIONS ###


{% for detection in detections %}
[ESCU - {{ detection.name }} - Rule]
action.escu = 0
action.escu.enabled = 1
description = {{ detection.description }}
action.escu.mappings = {{ detection.mappings | tojson }}
{% if detection.data_metadata.data_models is defined %}
action.escu.data_models = {{ detection.data_metadata.data_models | tojson }}
{% endif %}
{% if detection.eli5 is defined %}
action.escu.eli5 = {{ detection.eli5 }}
{% else %}
action.escu.eli5 = none
{% endif %}
{% if detection.how_to_implement is defined %}
action.escu.how_to_implement = {{ detection.how_to_implement }}
{% else %}
action.escu.how_to_implement = none
{% endif %}
{% if detection.known_false_positives is defined %}
action.escu.known_false_positives = {{ detection.known_false_positives }}
{% else %}
action.escu.known_false_positives = None
{% endif %}
action.escu.creation_date = {{ detection.creation_date }}
action.escu.modification_date = {{ detection.modification_date }}
action.escu.confidence = {{ detection.confidence }}
action.escu.full_search_name = ESCU - {{ detection.name }} - Rule
action.escu.search_type = detection
{% if detection.asset_type is defined %}
action.escu.asset_at_risk = {{ detection.asset_type }}
{% endif %}
{% if detection.entities is defined %}
action.escu.fields_required = {{ detection.entities | tojson }}
action.escu.entities = {{ detection.entities | tojson }}
{% endif %}
{% if detection.data_metadata.providing_technologies is defined %}
action.escu.providing_technologies = {{ detection.data_metadata.providing_technologies | tojson }}
{% endif %}
action.escu.analytic_story = {{ detection.stories | tojson | replace("\\u0026","&") }}
{% if detection.detect.splunk is defined %}
{% set correlation_rule = detection.detect.splunk.correlation_rule %}
{% elif  detection.detect.uba is defined %}
{% set correlation_rule = detection.detect.uba.correlation_rule %}
{% endif %}
{% if correlation_rule.schedule.cron_schedule is defined %}
cron_schedule = {{ correlation_rule.schedule.cron_schedule }}
{% endif %}
{% if correlation_rule.schedule.earliest_time is defined %}
dispatch.earliest_time = {{ correlation_rule.schedule.earliest_time }}
{% endif %}
{% if correlation_rule.schedule.latest_time is defined %}
dispatch.latest_time = {{ correlation_rule.schedule.latest_time }}
{% endif %}
{% if correlation_rule is defined %}
action.correlationsearch.enabled = 1
action.correlationsearch.label = {{ detection.name }}
{% if correlation_rule.notable is defined %}
action.notable = 1
{% endif %}
{% if correlation_rule.notable.nes_fields is defined %}
action.notable.param.nes_fields = {{ correlation_rule.notable.nes_fields }}
action.notable.param.rule_description = {{ correlation_rule.notable.rule_description }}
action.notable.param.rule_title = {{ correlation_rule.notable.rule_title }}
action.notable.param.security_domain = {{ detection.security_domain }}
action.notable.param.severity = {{ detection.confidence }}
{% endif %}
{% if (correlation_rule.notable.drilldown_name is defined) and (correlation_rule.notable.drilldown_search is defined) %}
action.notable.param.drilldown_name = {{ correlation_rule.notable.drilldown_name }}
action.notable.param.drilldown_search = {{ correlation_rule.notable.drilldown_search }}
{% endif %}
action.notable.param.recommended_actions = {{ detection.recommended_actions }}
action.notable.param.next_steps = {{ detection.next_steps }}
{% if correlation_rule.risk is defined %}
action.risk = 1
action.risk.param._risk_object = {{ correlation_rule.risk.risk_object }}
action.risk.param._risk_object_type = {{ correlation_rule.risk.risk_object_type[0] }}
action.risk.param._risk_score = {{ correlation_rule.risk.risk_score }}
action.risk.param.verbose = 0
{% endif %}
{% if correlation_rule.suppress is defined %}
alert.digest_mode = 1
alert.suppress = 1
alert.suppress.fields = {{ correlation_rule.suppress.suppress_fields }}
alert.suppress.period = {{ correlation_rule.suppress.suppress_period }}
{% endif %}
{% endif %}
action.escu.earliest_time_offset = 3600
action.escu.latest_time_offset = 86400
disabled = true
enableSched = 1
counttype = number of events
relation = greater than
quantity = 0
realtime_schedule = 0
schedule_window = auto
is_visible = false
{% if detection.detect.splunk is defined %}
search = {{ detection.detect.splunk.correlation_rule.search }}
{% elif detection.detect.uba is defined %}
search = {{ detection.detect.uba.correlation_rule.search }}
{% endif %}

{% endfor %}
### END ESCU DETECTIONS ###

### ESCU INVESTIGATIONS ###

{% for investigation in investigations %}
{% if investigation.type != 'phantom' %}
[ESCU - {{ investigation.name }}]
action.escu = 0
action.escu.enabled = 1
action.escu.search_type = investigative
action.escu.full_search_name = ESCU - {{ investigation.name }}
description = {{ investigation.description }}
action.escu.creation_date = {{ investigation.creation_date }}
action.escu.modification_date = {{ investigation.modification_date }}
action.escu.analytic_story = {{ investigation.stories | tojson | replace("\\u0026","&") }}
action.escu.earliest_time_offset = 3600
action.escu.latest_time_offset = 86400
{% if investigation.data_metadata.data_models is defined %}
action.escu.data_models = {{ investigation.data_metadata.data_models | tojson }}
{% endif %}
{% if investigation.data_metadata.providing_technologies is defined %}
action.escu.providing_technologies = {{ investigation.data_metadata.providing_technologies | tojson }}
{% endif %}
{% if investigation.eli5 is defined %}
action.escu.eli5 = {{ investigation.eli5 }}
{% else %}
action.escu.eli5 = none
{% endif %}
{% if investigation.how_to_implement is defined %}
action.escu.how_to_implement = {{ investigation.how_to_implement }}
{% else %}
action.escu.how_to_implement = none
{% endif %}
{% if investigation.known_false_positives is defined %}
action.escu.known_false_positives = {{ investigation.known_false_positives }}
{% else %}
action.escu.known_false_positives = None at this time
{% endif %}
{% if investigation.entities is defined %}
action.escu.fields_required = {{ investigation.entities | tojson }}
action.escu.entities = {{ investigation.entities | tojson }}
{% endif %}
disabled = true
schedule_window = auto
is_visible = false
search = {{ investigation.investigate.splunk.search }}

{% endif %}
{% endfor %}

### END ESCU INVESTIGATIONS ###


### ESCU BASELINES ###

{% for baseline in baselines %}
[ESCU - {{ baseline.name }}]
action.escu = 0
action.escu.enabled = 1
action.escu.search_type = support
action.escu.full_search_name = ESCU - {{ baseline.name }}
description = {{ baseline.description }}
action.escu.creation_date = {{ baseline.creation_date }}
action.escu.modification_date = {{ baseline.modification_date }}
action.escu.analytic_story = {{ baseline.stories | tojson | replace("\\u0026","&") }}
{% if baseline.data_metadata.data_models is defined %}
action.escu.data_models = {{ baseline.data_metadata.data_models | tojson }}
{% endif %}
{% if baseline.baseline.splunk.schedule.earliest_time is defined %}
dispatch.earliest_time = {{ baseline.baseline.splunk.schedule.earliest_time }}
{% endif %}
{% if baseline.baseline.splunk.schedule.latest_time is defined %}
dispatch.latest_time = {{ baseline.baseline.splunk.schedule.latest_time }}
{% endif %}
{% if baseline.data_metadata.providing_technologies is defined %}
action.escu.providing_technologies = {{ baseline.data_metadata.providing_technologies | tojson }}
{% endif %}
{% if baseline.eli5 is defined %}
action.escu.eli5 = {{ baseline.eli5 }}
{% else %}
action.escu.eli5 = none
{% endif %}
{% if baseline.how_to_implement is defined %}
action.escu.how_to_implement = {{ baseline.how_to_implement }}
{% else %}
action.escu.how_to_implement = none
{% endif %}
{% if baseline.known_false_positives is defined %}
action.escu.known_false_positives = {{ baseline.known_false_positives }}
{% else %}
action.escu.known_false_positives = None at this time
{% endif %}
{% if baseline.entities is defined %}
action.escu.fields_required = {{ baseline.entities | tojson }}
action.escu.entities = {{ baseline.entities | tojson }}
{% endif %}
disabled = true
schedule_window = auto
is_visible = false
search = {{ baseline.baseline.splunk.search }}

{% endfor %}

### USAGE DASHBOARD CONFIGURATIONS ###

[escu-metrics-usage]
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
dispatchAs = user
search = index=_audit sourcetype="audittrail" \
"ESCU - "\
`comment("Find all the search names in the audittrail.")`\
| stats count(search) by search savedsearch_name user\
| eval usage=(if(savedsearch_name=="","Adhoc","Scheduled")) \
`comment("If the savedsearch_name field in the audittrail is empty, the search was run adhoc. Otherwise it was run as a scheduled search")`\
| rex field=search "\"(?<savedsearch_name>.*)\""\
`comment("Extract the name of the search from the search string")`\
| table savedsearch_name count(search) usage user | join savedsearch_name max=0 type=left [search sourcetype="manifests" | spath searches{} | mvexpand searches{} | spath input=searches{} | table category search_name | rename search_name as savedsearch_name | dedup savedsearch_name] | search category=*

[escu-metrics-search]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
enableSched = 1
cron_schedule = 0 0 * * *
dispatch.earliest_time = -4h@h
dispatch.latest_time = -1h@h
search = index=_audit action=search | transaction search_id maxspan=3m | search ESCU | stats sum(total_run_time) avg(total_run_time) max(total_run_time) sum(result_count)

[escu-metrics-search-events]
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
enableSched = 1
dispatch.earliest_time = -4h@h
dispatch.latest_time = -1h@h
search = [search index=_audit sourcetype="audittrail" \"ESCU NOT "index=_audit" | where search !="" | dedup search_id | rex field=search "\"(?<search_name>.*)\"" | rex field=_raw "user=(?<user>[a-zA-Z0-9_\-]+)" | eval usage=if(savedsearch_name!="", "scheduled", "adhoc") | eval savedsearch_name=if(savedsearch_name != "", savedsearch_name, search_name) | table savedsearch_name search_id user _time usage | outputlookup escu_search_id.csv | table search_id] index=_audit total_run_time event_count result_count NOT "index=_audit" | lookup escu_search_id.csv search_id | stats count(savedsearch_name) AS search_count avg(total_run_time) AS search_avg_run_time sum(total_run_time) AS search_total_run_time sum(result_count) AS search_total_results earliest(_time) AS firsts latest(_time) AS lasts by savedsearch_name user usage| eval first_run=strftime(firsts, "%B %d %Y") | eval last_run=strftime(lasts, "%B %d %Y")

[escu-metrics-search-longest-runtime]
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
enableSched = 1
cron_schedule = 0 0 * * *
disabled = 1
dispatch.earliest_time = -4h@h
dispatch.latest_time = -1h@h
search = index=_* ESCU [search index=_* action=search latest=-2h earliest=-1d| transaction search_id maxspan=3m | search ESCU | stats values(total_run_time) AS run by search_id | sort -run | head 1| table search_id] | table search search_id

[escu-metrics-usage-search]
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
dispatch.earliest_time = -4h@h
dispatch.latest_time = -1h@h
enableSched = 1
dispatchAs = user
search = index=_audit sourcetype="audittrail" \
"ESCU - "\
`comment("Find all the search names in the audittrail. Ignore the last few minutes so we can exclude this search's text from the result.")`\
| stats count(search) by search savedsearch_name user\
| eval usage=(if(savedsearch_name=="","Adhoc","Scheduled")) \
`comment("If the savedsearch_name field in the audittrail is empty, the search was run adhoc. Otherwise it was run as a scheduled search")`\
| rex field=search "\"(?<savedsearch_name>.*)\""\
`comment("Extract the name of the search from the search string")`\
| table savedsearch_name count(search) usage user | join savedsearch_name max=0 type=left [search sourcetype="manifests" | spath searches{} | mvexpand searches{} | spath input=searches{} | table category search_name | rename search_name as savedsearch_name | dedup savedsearch_name] | search category=*

### END OF USAGE DASHBOARD CONFIGURATIONS ###
